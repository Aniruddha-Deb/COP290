#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>

#include <iostream>

SDL_Texture* map;
SDL_Texture* player;
SDL_Renderer* ren;
TTF_Font* m5x7;

const int MAP_W = 32;
const int MAP_H = 116;
const int T = 16;
const int SCALE = 4;
const int WIN_W = 16;
const int WIN_H = 12;

const int DIR_D = 0;
const int DIR_L = 1;
const int DIR_R = 2;
const int DIR_U = 3;

const char* str_regions[39] = {
    "Aravali House",
    "Jwalamukhi House",
    "Karakoram House",
    "Nilgiri House",
    "Tennis Court",
    "Volleyball Court",
    "Nalanda Ground",
    "SAC",
    "SAC lawns",
    "Zanskar House",
    "Shivalik House",
    "Rajdhani",
    "Masala Mix",
    "Dronagiri and Saptagiri House",
    "Udaigiri House",
    "Girnar House",
    "Cricket Ground",
    "Grounds",
    "Walking Track",
    "Bharti",
    "SIT",
    "Cycle Stand (Acad)",
    "Shiru Cafe",
    "Amul",
    "Nescafe",
    "Central Library",
    "Red Square",
    "WindT",
    "Stones",
    "Mech Lawns",
    "Biotech Lawns",
    "Main Building",
    "Security Office",
    "Lecure Hall Complex",
    "Synergy Building",
    "Kailash House",
    "Himadri House",
    "Kailash Lawns",
    "Himadri Circle"
};

const int regions[MAP_H][MAP_W] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,2146,2146,2146,0,0,0,0,2145,2145,2145,0,0,0,0,2143,2143,2143,0,0,0,0,2144,2144,2144,0,0,0,0,0,
    0,0,0,0,0,2146,0,0,0,0,0,0,2145,0,0,0,0,0,0,2143,0,0,0,0,0,0,2144,0,0,0,0,0,
    0,0,0,0,0,2146,0,0,0,0,0,0,2145,0,0,0,0,0,0,2143,0,0,0,0,0,0,2144,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,0,0,0,0,0,2147,2147,2147,2147,0,0,0,0,0,2148,2148,2148,2148,0,0,
    2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,0,0,0,0,0,2147,2147,2147,2147,0,0,0,0,0,2148,2148,2148,2148,0,0,
    2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,0,0,0,0,0,2147,2147,2147,2147,0,0,0,0,0,2148,2148,2148,2148,0,0,
    2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,2149,0,0,0,0,0,2147,2147,2147,2147,0,0,0,0,0,2148,2148,2148,2148,0,0,
    0,0,0,0,2150,0,0,0,0,0,0,0,0,0,0,0,0,2147,2147,2147,2147,0,0,0,0,0,2148,2148,2148,2148,0,0,
    0,0,0,0,2150,0,0,0,0,0,0,0,0,0,0,0,0,2147,2147,2147,2147,0,0,0,0,0,2148,2148,2148,2148,0,0,
    0,0,0,0,2150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,2150,2150,2150,2150,2150,2150,2150,0,0,0,0,0,0,0,2152,2152,2152,2152,2152,2152,0,0,0,0,2153,2153,2153,0,
    0,0,0,0,0,0,0,0,0,0,2150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,2150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,2150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2151,2151,2151,2151,2151,2151,2151,2151,2151,2151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2151,2151,2151,2151,2151,2151,2151,2151,2151,2151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2151,2151,2151,2151,2151,2151,2151,2151,2151,2151,0,0,0,0,0,0,0,2155,2155,2155,0,2155,0,2154,0,2154,0,0,0,0,0,0,
    2151,2151,2151,2151,2151,2151,2151,2151,2151,2151,0,0,0,0,0,0,0,2155,0,2155,2155,2155,0,2154,2154,2154,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2156,2156,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,2161,2161,2161,2161,2161,2161,2161,2161,2161,0,0,0,0,0,0,0,2156,2156,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,0,0,0,0,0,0,0,0,2161,0,0,0,0,0,0,2156,2156,2156,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,0,2160,2160,2160,2160,2160,2160,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2158,
    0,2161,0,2160,2160,2160,2160,2160,2160,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2158,
    0,2161,0,2160,2160,2160,2160,2160,2160,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2158,
    0,2161,0,2160,2160,2160,2160,2160,2160,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2158,
    0,2161,0,2160,2160,2160,2160,2160,2160,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2158,
    0,2161,0,2160,2160,2160,2160,2160,2160,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2158,
    0,2161,0,2160,2160,2160,2160,2160,2160,2160,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2158,
    0,2161,0,2160,2160,2160,2160,2160,2160,2160,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,0,2160,2160,2160,2160,2160,2160,2160,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,0,2160,2160,2160,2160,2160,2160,2160,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,0,0,0,0,0,0,0,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,0,0,0,0,0,0,0,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,2157,2157,2157,2157,0,0,0,0,0,
    0,2161,0,0,2159,2159,2159,2159,0,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,2157,2157,2157,2157,0,0,0,0,0,
    0,2161,0,2159,2159,2159,2159,2159,2159,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,2159,2159,2159,2159,2159,2159,2159,2159,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,2159,2159,2159,2159,2159,2159,2159,2159,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,2159,2159,2159,2159,2159,2159,2159,2159,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,0,2159,2159,2159,2159,2159,2159,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,0,0,2159,2159,2159,2159,0,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,0,0,0,0,0,0,0,0,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2161,2161,2161,2161,2161,2161,2161,2161,2161,2161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2177,0,0,0,0,0,0,0,0,0,0,2162,2162,2162,2162,2162,0,0,0,0,2163,2163,2163,0,0,
    0,0,0,0,0,0,0,2177,0,0,0,0,0,0,0,0,0,0,0,2162,2162,2162,0,0,0,0,0,2163,2163,2163,0,0,
    0,0,0,0,0,0,0,2177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2165,0,2164,0,0,0,0,
    0,0,0,0,0,0,0,2177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2165,0,2164,0,0,0,0,
    0,0,0,0,0,0,0,2177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2169,2169,2169,0,
    0,0,0,2177,2177,2177,2177,2177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2166,0,2169,2169,0,2169,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2166,0,0,2169,2169,2169,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2167,2167,2167,0,0,2168,2168,2166,2166,2166,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2168,2168,2168,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2176,2176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2176,2176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2176,2176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2176,2176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2176,2176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2176,2176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2170,0,2170,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2170,2170,2170,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2171,0,2171,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2175,2175,2175,2174,2174,2174,2174,2174,0,0,0,0,2171,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2174,2174,2174,0,0,0,0,2171,2171,2171,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2173,2173,2173,2173,2173,2173,2173,2173,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2173,2173,2173,2173,2173,2173,2173,2173,0,0,0,0,0,0,2172,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2173,2173,2173,2173,2173,2173,2173,2173,0,0,0,0,2172,2172,2172,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2173,2173,2173,2173,2173,2173,2173,2173,0,0,0,0,2172,2172,2172,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2173,2173,2173,2173,2173,2173,2173,2173,0,0,0,0,2172,2172,2172,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2173,2173,2173,2173,2173,2173,2173,2173,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2173,2173,2173,2173,2173,2173,2173,2173,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2173,2173,2173,2173,2173,2173,2173,2173,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,2181,2181,2181,2181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,2181,0,0,2181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,2181,0,0,2181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,2181,2181,2181,2181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,2178,2178,2178,2178,2178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2179,2179,2179,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2179,2179,2179,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2179,0,0,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,2180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

// Generated using Tiled. Walkable tiles have a nonzero code.
const int walkable[MAP_H+2][MAP_W+2] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,884,884,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,884,884,0,
    0,884,884,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,884,884,0,
    0,884,884,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,884,884,0,
    0,884,884,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,884,884,0,
    0,884,884,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,884,884,0,
    0,884,884,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,884,884,0,
    0,884,884,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,884,884,0,
    0,884,884,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,104,0,0,0,0,0,0,884,884,0,
    0,884,884,104,104,104,104,0,0,0,104,104,104,104,0,0,0,104,104,104,104,0,0,0,104,104,104,104,0,0,0,884,884,0,
    0,884,884,104,104,0,104,0,0,0,104,104,0,104,0,0,0,104,104,0,104,0,0,0,104,104,0,104,0,0,0,884,884,0,
    0,884,884,104,104,104,104,0,0,0,104,104,104,104,0,0,0,104,104,104,104,0,0,0,104,104,104,104,0,0,0,884,884,0,
    0,103,104,104,104,104,104,104,104,104,104,104,104,104,104,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,0,
    0,132,133,133,133,133,133,133,133,133,133,133,133,133,133,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,133,0,
    0,873,874,874,874,874,874,874,874,874,874,874,875,332,333,338,339,0,0,0,0,0,0,884,884,884,0,0,0,0,0,0,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,332,333,338,339,0,1336,1337,1338,1339,922,884,884,884,922,1377,1378,1379,1380,0,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,332,333,338,339,0,1359,1360,1361,1362,922,884,884,884,922,1400,1401,1402,1403,0,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,332,333,338,339,922,922,922,922,922,922,884,884,884,922,922,922,922,922,922,104,0,
    0,893,894,894,894,894,894,894,894,894,894,894,895,332,333,338,339,922,922,922,922,922,922,884,884,884,922,922,922,922,922,922,104,0,
    0,0,0,0,0,104,104,104,104,104,104,104,104,332,333,338,339,0,1336,1337,1338,1339,922,884,884,884,922,1377,1378,1379,1380,0,104,0,
    0,0,0,0,0,0,873,874,874,874,874,874,875,332,333,338,339,0,1359,1360,1361,1362,922,884,884,884,922,1400,1401,1402,1403,0,104,0,
    0,0,0,0,0,0,893,894,894,894,894,894,895,15,16,17,18,0,0,0,0,0,0,884,884,884,0,0,0,0,0,0,104,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,46,47,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,
    0,0,0,0,0,0,0,0,0,0,0,884,0,218,219,220,221,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,0,0,0,0,0,0,0,0,0,0,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,0,0,0,0,0,0,0,0,0,0,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,0,0,0,0,0,0,0,0,0,0,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,0,0,0,0,0,0,0,0,0,0,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,0,0,0,0,0,0,0,0,0,0,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,0,0,0,0,0,0,0,0,0,0,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,0,0,0,0,0,0,0,0,0,0,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,0,0,0,0,0,0,0,0,0,0,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,884,884,884,884,922,922,884,884,884,884,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,884,884,884,884,922,922,884,884,884,884,884,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,103,0,
    0,884,884,884,884,922,922,884,884,884,884,884,0,332,333,338,339,0,416,416,416,0,416,0,416,0,416,0,103,0,0,0,103,0,
    0,884,884,884,884,922,922,884,884,884,884,884,0,332,333,338,339,0,416,0,416,416,416,0,416,416,416,0,103,0,0,0,103,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,0,0,0,416,0,0,0,416,0,0,0,103,0,0,0,103,0,
    0,133,133,133,133,133,133,133,133,133,133,133,133,44,45,46,47,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,218,219,220,221,922,0,922,922,0,0,0,0,0,922,922,922,0,0,0,103,0,
    0,0,956,956,956,956,956,956,956,956,956,956,0,332,333,338,339,922,0,884,922,0,0,0,0,0,922,922,922,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,884,884,922,0,0,0,0,0,922,922,922,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,0,0,0,0,0,0,0,0,922,922,922,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,0,0,0,922,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,884,332,333,338,339,922,0,0,0,922,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,884,332,333,338,339,922,0,0,0,922,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,0,0,0,922,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,922,0,0,0,922,0,0,0,0,0,0,0,0,0,0,103,0,
    0,0,956,843,843,843,843,843,843,843,843,956,0,332,333,338,339,922,922,922,922,922,103,103,103,103,103,103,103,0,0,0,103,0,
    0,0,956,843,843,884,884,884,884,843,843,956,0,332,333,338,339,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,
    0,0,956,843,884,884,884,884,884,884,843,956,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,499,499,499,499,499,499,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,0,0,0,0,0,499,0,
    0,0,956,884,884,884,922,922,884,884,884,956,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,0,0,0,0,0,499,0,
    0,0,956,884,884,884,884,884,884,884,884,956,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,0,0,0,0,0,499,0,
    0,0,956,843,884,884,884,884,884,884,843,956,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,0,0,0,0,0,499,0,
    0,0,956,843,843,884,884,884,884,843,843,956,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,0,0,0,0,0,499,0,
    0,0,956,843,843,843,843,843,843,843,843,956,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,0,0,0,0,0,499,0,
    0,0,956,956,956,956,956,956,956,956,956,956,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,0,0,0,0,0,499,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,0,0,0,0,0,499,0,
    0,103,0,0,0,0,0,0,416,416,416,416,416,332,333,338,339,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,
    0,103,0,0,0,0,0,0,416,416,416,416,416,332,333,338,339,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,
    0,103,0,0,0,0,0,0,416,416,416,416,416,332,333,338,339,0,0,0,0,0,0,0,499,0,499,104,499,0,0,0,0,0,
    0,103,0,0,0,0,0,0,416,0,0,0,416,332,333,338,339,0,0,0,0,0,0,0,499,0,499,104,499,0,0,0,0,0,
    0,103,0,0,0,0,0,0,416,0,0,0,416,332,333,338,339,0,0,0,0,0,0,0,0,0,499,104,0,0,0,0,0,0,
    0,103,0,0,0,0,0,0,416,416,416,416,416,332,333,338,339,0,0,0,0,0,0,0,0,0,499,104,0,499,499,499,0,0,
    0,104,104,104,104,104,104,104,104,104,104,104,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,104,499,499,0,499,0,0,
    0,104,104,104,104,0,0,0,104,104,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,0,499,104,0,499,499,499,0,0,
    0,104,104,104,104,0,0,0,104,104,0,0,0,332,333,338,339,499,499,499,0,0,499,499,499,499,499,104,0,0,0,0,0,0,
    0,104,104,104,104,0,0,0,104,104,0,0,0,332,333,338,339,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,
    0,104,0,0,0,0,0,0,104,104,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,104,0,0,0,0,0,0,104,104,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,104,0,0,0,0,0,0,104,104,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,
    0,104,0,0,0,0,0,0,104,104,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,
    0,104,0,0,0,0,0,0,104,104,0,0,0,15,16,17,18,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,
    0,104,0,0,0,0,0,0,104,104,104,104,104,44,45,46,47,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,
    0,104,0,0,0,0,0,0,133,133,133,133,133,189,190,191,192,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,
    0,104,0,0,0,0,0,0,103,104,0,0,0,218,219,220,221,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,
    0,104,0,0,0,0,0,0,103,104,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,104,0,104,0,43,0,0,0,0,
    0,104,0,0,0,0,0,0,103,104,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,103,132,133,138,43,0,142,0,0,
    0,104,0,0,0,0,0,0,103,104,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,103,132,133,104,104,104,104,104,0,
    0,104,0,0,0,0,0,0,103,104,0,0,0,332,333,338,339,0,0,0,0,0,0,0,0,103,132,133,499,0,499,104,104,0,
    0,104,104,104,104,0,0,0,103,104,0,0,0,332,333,338,339,103,103,103,883,844,843,884,885,103,132,133,0,499,0,104,104,0,
    0,104,104,104,104,0,0,0,103,104,0,0,0,332,333,338,339,103,103,103,893,894,894,894,895,103,132,133,499,499,499,104,104,0,
    0,104,104,104,104,0,0,0,132,133,0,0,0,332,333,338,339,103,103,103,103,103,103,103,103,103,132,133,132,132,132,132,104,0,
    0,103,103,103,103,103,103,103,103,103,103,103,103,332,333,338,339,873,874,874,874,874,874,874,875,103,132,133,132,132,132,0,104,0,
    0,873,874,874,875,0,0,0,0,0,82,82,82,332,333,338,339,883,884,884,884,884,884,884,885,103,132,133,132,0,0,843,104,0,
    0,883,884,884,885,0,0,0,0,0,0,0,82,332,333,338,339,883,884,884,884,884,884,884,885,103,132,133,0,843,843,843,104,0,
    0,883,884,884,885,0,0,0,0,0,0,0,82,332,333,338,339,883,884,884,884,884,884,884,885,103,132,133,132,843,884,843,104,0,
    0,883,884,884,885,0,0,0,0,0,0,0,82,332,333,338,339,883,884,884,884,884,884,884,885,103,132,133,0,843,843,843,104,0,
    0,893,894,894,895,0,0,0,0,0,0,0,82,332,333,338,339,883,884,884,884,884,884,884,885,103,132,133,104,104,104,104,104,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,332,333,338,339,883,884,884,884,884,884,884,885,103,132,133,873,874,874,875,104,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,332,333,338,339,893,894,894,894,894,894,894,895,103,132,133,893,894,894,895,133,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,332,333,363,364,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,332,0,0,393,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,419,0,0,306,422,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,332,333,334,335,451,452,452,452,452,452,452,452,452,452,452,452,452,452,452,452,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,361,362,363,339,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,390,391,396,397,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,104,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,390,391,396,397,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,104,0,
    0,104,104,0,0,0,0,0,0,0,0,0,82,390,391,396,397,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,104,0,
    0,104,104,104,104,104,104,104,104,104,104,104,82,390,391,396,397,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,104,0,
    0,141,141,141,141,141,141,104,141,141,141,141,142,390,391,396,397,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,104,0,
    0,104,104,104,104,104,104,104,104,104,104,104,104,390,391,396,397,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,104,0,
    0,873,874,874,874,874,874,874,874,874,874,874,875,390,391,396,397,0,0,0,0,0,0,0,0,0,0,104,104,104,104,104,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,361,362,363,339,0,0,0,0,0,0,0,0,0,0,104,104,104,104,104,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,390,391,396,397,0,0,0,0,0,0,0,0,0,0,104,873,874,874,875,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,390,391,396,397,0,0,0,0,0,0,0,0,0,0,104,883,884,884,885,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,390,391,396,397,0,0,0,0,0,0,0,0,0,0,104,883,884,884,885,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,390,391,396,397,0,0,0,0,0,0,0,0,0,0,104,883,884,884,885,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,390,391,396,397,0,0,0,0,0,0,0,0,0,0,104,883,884,884,885,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,390,391,396,397,0,0,0,0,0,0,0,0,0,0,104,883,884,884,885,104,0,
    0,883,884,884,884,884,884,884,884,884,884,884,885,390,391,396,397,0,0,0,0,0,0,0,0,0,0,104,893,894,894,895,104,0,
    0,893,894,894,894,894,894,894,894,894,894,894,895,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,104,104,104,104,104,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
}; 

void load_fonts() {
    bool success = true;
    if (TTF_Init() == -1) {
        std::cout << "SDL_TTF error: " << TTF_GetError() << std::endl;
        success = false;
    }
    if (success) {
        m5x7 = TTF_OpenFont("../assets/m5x7.ttf", 16);
        std::cout << "Loaded font" << std::endl;
    }
}

void load_textures() {
    int img_flags = IMG_INIT_PNG;
    bool success = true;
    if (!(IMG_Init(img_flags) & img_flags)) {
        std::cout << "SDL_Image Error: " << SDL_GetError() << std::endl;
        success = false;
    }

    if (success) {
        SDL_Surface* surf = IMG_Load("../assets/iitd_map.png");
        map = SDL_CreateTextureFromSurface(ren, surf);

        surf = IMG_Load("../assets/characters.png");
        player = SDL_CreateTextureFromSurface(ren, surf);
        SDL_FreeSurface(surf);
    }
}

int main(int argc, char const *argv[]) {
    SDL_Window *win = SDL_CreateWindow("IITD Simulator", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, T*WIN_W*SCALE, T*WIN_H*SCALE, SDL_WINDOW_SHOWN);
    if (win == nullptr){
        std::cout << "SDL_CreateWindow Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    ren = SDL_CreateRenderer(win, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (ren == nullptr){
        SDL_DestroyWindow(win);
        std::cout << "SDL_CreateRenderer Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    load_textures();
    load_fonts();
    SDL_RenderSetScale(ren, 4,4);

    const Uint8* state = SDL_GetKeyboardState(nullptr);

    SDL_Event e;
    SDL_Rect rootRect = {T*6,T*32,T*WIN_W,T*WIN_H};
    int pno = 1;
    int dir = DIR_D;
    int iter = 0;
    SDL_Rect playerRect = {(dir+iter*4)*T,pno*T,T,T};
    SDL_Rect playerPosRect = {T*WIN_W/2, T*WIN_H/2,T,T};

    int posx = playerPosRect.x + rootRect.x;
    int posy = playerPosRect.y + rootRect.y;

    bool quit = false;
    int clk = 0;
    int speed = 1;
    bool moving = false;
    while (!quit) {
        clk = (clk+1)%60;
        // render game to screen

        // compute rootRect and playerRect positions
        if (posx < T*WIN_W/2) {
            playerPosRect.x = posx;
            rootRect.x = 0;
        }
        else if (posx > (MAP_W*T)-(T*WIN_W/2)) {
            playerPosRect.x = posx-((MAP_W*T)-(T*WIN_W));
            rootRect.x = (MAP_W-WIN_W)*T;
        }
        else {
            playerPosRect.x = T*WIN_W/2; 
            rootRect.x = posx-(T*WIN_W/2);
        }

        // compute rootRect and playerRect positions
        if (posy < T*WIN_H/2) {
            playerPosRect.y = posy;
            rootRect.y = 0;
        }
        else if (posy > (MAP_H*T)-(T*WIN_H/2)) {
            playerPosRect.y = posy-((MAP_H*T)-(T*WIN_H));
            rootRect.y = (MAP_H-WIN_H)*T;
        }
        else {
            playerPosRect.y = T*WIN_H/2; 
            rootRect.y = posy-(T*WIN_H/2);
        }

        SDL_RenderCopy(ren, map, &rootRect, NULL);
        SDL_RenderCopy(ren, player, &playerRect, &playerPosRect);

        int px = (posx+T)/T;
        int py = (posy+T)/T;
        int xe = posx%T;
        int ye = posy%T;

        // std::cout << px << " " << py << " " << xe << " " << ye << " " << std::endl;
        // std::cout << walkable[py-1][px-1] << " " << walkable[py-1][px] << " " << walkable[py-1][px+1] << std::endl;
        // std::cout << walkable[py][px-1] << " " << walkable[py][px] << " " << walkable[py][px+1] << std::endl;
        // std::cout << walkable[py+1][px-1] << " " << walkable[py+1][px] << " " << walkable[py+1][px+1] << std::endl;

        // check and display current region
        if (regions[py-1][px-1] > 0) {
            SDL_Color White = {255, 255, 255};
            //std::cout << str_regions[regions[py-1][px-1]-2143] << std::endl;
            SDL_Surface *surf = TTF_RenderText_Solid(m5x7, str_regions[regions[py-1][px-1]-2143], White);
            //std::cout << surf->w << " " << surf->h << std::endl;
            SDL_Texture *texture = SDL_CreateTextureFromSurface(ren, surf);
            SDL_Rect location_rect = {(WIN_W*T - surf->w)/2, ((WIN_H-1)*T-surf->h), surf->w, surf->h};
            //std::cout << location_rect.x << " " << location_rect.y << " " << location_rect.w << " " << location_rect.h << std::endl;
            SDL_RenderCopy(ren, texture, NULL, &location_rect);
            //std::cout << "Rendered" << std::endl;
        }
        SDL_RenderPresent(ren);

        // get events 
        if (state[SDL_SCANCODE_SPACE]) {
            speed = 2;
        }
        else {
            speed = 1;
        }

        if (state[SDL_SCANCODE_RIGHT] || state[SDL_SCANCODE_LEFT] || state[SDL_SCANCODE_UP] || state[SDL_SCANCODE_DOWN]) {
            moving = true;
            if (state[SDL_SCANCODE_RIGHT]) dir = DIR_R;
            else if (state[SDL_SCANCODE_LEFT]) dir = DIR_L;
            else if (state[SDL_SCANCODE_UP]) dir = DIR_U;
            else if (state[SDL_SCANCODE_DOWN]) dir = DIR_D;
        }
        else moving = false;
        if (state[SDL_SCANCODE_RIGHT]) { 
            if (walkable[py][px+1] && walkable[py+1][px+1]) {
                posx += speed; 
            }
            else if (walkable[py][px+1] && !walkable[py+1][px+1] && ye < 4) {
                posx += speed;
                posy = (py-1)*T;
            }
            else if (walkable[py+1][px+1] && !walkable[py][px+1] && ye >= 12) {
                posx += speed;
                posy = py*T;
            }
        }
        else if (state[SDL_SCANCODE_LEFT]) { 
            if (walkable[py][px] && walkable[py+1][px]) {
                posx -= speed; 
            }
            else if (walkable[py][px] && !walkable[py+1][px] && ye < 4) {
                posx -= speed;
                posy = (py-1)*T;
            }
            else if (walkable[py+1][px] && !walkable[py][px] && ye >= 12) {
                posx -= speed;
                posy = py*T;
            }
        }
        else if (state[SDL_SCANCODE_UP]) { 
            if (walkable[py][px] && walkable[py][px+1]) {
                posy -= speed; 
            }
            else if (walkable[py][px] && !walkable[py][px+1] && xe < 4) {
                posy -= speed;
                posx = (px-1)*T;
            }
            else if (walkable[py][px+1] && !walkable[py][px] && xe >= 12) {
                posy -= speed;
                posx = px*T;
            }
        }
        else if (state[SDL_SCANCODE_DOWN]) { 
            if (walkable[py+1][px] && walkable[py+1][px+1]) {
                posy += speed; 
            }
            else if (walkable[py+1][px] && !walkable[py+1][px+1] && xe < 4) {
                posy += speed;
                posx = (px-1)*T;
            }
            else if (walkable[py+1][px+1] && !walkable[py+1][px] && xe >= 12) {
                posy += speed;
                posx = px*T;
            }
        }

        if (clk%4 == 0) {
            int loc = ((iter/2)+1)*(iter%2); // 0 -> 1 -> 0 -> 2
            // std::cout << loc << std::endl;
            playerRect.x = (dir+loc*4)*T;
            if (moving) iter = (iter+1)%4;
            else iter = 0;
        }

        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
                break;
            }
        }

        SDL_Delay(10);  
    }

    TTF_Quit();
    SDL_DestroyRenderer(ren);
    SDL_DestroyWindow(win);
    SDL_Quit();
    
    return 0;
}